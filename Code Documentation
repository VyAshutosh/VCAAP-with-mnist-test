""" Variational Canonical Correlation Analysis-private
"""

# Author: Ashutosh Vyas


from math import log, sqrt
import numbers

import numpy as np
from scipy import linalg
from scipy.special import gammaln
from scipy.sparse import issparse
from scipy.sparse.linalg import svds

from ._base import _BaseVCAAP
from ..utils import check_random_state
from ..utils import check_array
from ..utils.extmath import fast_logdet, randomized_svd, svd_flip
from ..utils.extmath import stable_cumsum
from ..utils.validation import check_is_fitted
from ..utils.validation import _deprecate_positional_args


def _assess_dimension(spectrum, rank, n_samples):
    """Compute the log-likelihood of a rank ``rank`` dataset.
    The dataset is assumed to be embedded in gaussian noise of shape(n,
    dimf) having spectrum ``spectrum``.



class VCAAP(_BaseVCAAP):
    """VCCA a deep multi-view learn-ing model that extends the latent variable 
    model interpretation of linear CCA to nonlinear obser-vation models 
    parameterized by deep neural net-works. We derive variational lower
    bounds of thedata likelihood by parameterizing the posteriorprobability of the 
    latent variables from the viewthat is available at test time. We also propose 
    avariant of VCCA called VCCA-private that can,in addition to the “common variables” 
    underly-ing both views, extract the “private variables”within each view, and 
    disentangles the sharedand private information for multi-view data with-out hard supervision.
    Parameters
    ----------
    n_components : img,float(zmean,h1mean,h2mean,zvar,h1var,h2var)
        Number of components to keep.
        if n_components is not set all components are kept::
            n_components == min(n_samples, n_features)
    copy : bool, default=True
        If False, data passed to fit are overwritten and running
        fit(X).transform(X) will not yield the expected results,
        use fit_transform(X) instead.
    whiten : bool, optional (default False)
        When True (False by default) the `components_` vectors are multiplied
        by the square root of n_samples and then divided by the singular values
        to ensure uncorrelated outputs with unit component-wise variances.
        Whitening will remove some information from the transformed signal
        (the relative variance scales of the components) but can sometime
        improve the predictive accuracy of the downstream estimators by
        making their data respect some hard-wired assumptions.
    svd_solver : str {'auto', 'full', 'arpack', 'randomized'}
        If auto :
            The solver is selected by a default policy based on `X.shape` and
            `n_components`: if the input data is larger than 500x500 and the
            number of components to extract is lower than 80% of the smallest
            dimension of the data, then the more efficient 'randomized'
            method is enabled. Otherwise the exact full SVD is computed and
            optionally truncated afterwards.
        If full :
            run exact full SVD calling the standard LAPACK solver via
            `scipy.linalg.svd` and select the components by postprocessing
        If arpack :
            run SVD truncated to n_components calling ARPACK solver via
            `scipy.sparse.linalg.svds`. It requires strictly
            0 < n_components < min(X.shape)
        If randomized :
            run randomized SVD by the method of Halko et al.
        .. versionadded:: 0.18.0
    tol : float >= 0, optional (default .0)
        Tolerance for singular values computed by svd_solver == 'arpack'.
        .. versionadded:: 0.18.0
    iterated_power : int >= 0, or 'auto', (default 'auto')
        Number of iterations for the power method computed by
        svd_solver == 'randomized'.
        .. versionadded:: 0.18.0
    random_state : int, RandomState instance, default=None
        Used when ``svd_solver`` == 'arpack' or 'randomized'. Pass an int
        for reproducible results across multiple function calls.
        See :term:`Glossary <random_state>`.
        .. versionadded:: 0.18.0
    Attributes
    ----------
    components_ : array, shape (n_components, n_features)
        Principal axes in feature space, representing the directions of
        maximum variance in the data. The components are sorted by
        ``zmean``.
    zmean : array, shape (n_components,float)
        The amount of mean explained by each of the selected components.
        Equal to n_components mean value
      of X.
    images : array, shape (n_components,float)
        Dataset component
   h mean : array, shape (n_components,float)
        The amount of mean explained by each of the selected components.
        Equal to n_components mean value
      of X.
    mean_ : array, shape (n_features,)
        Per-feature empirical mean, estimated from the training set.
        Equal to `X.mean(axis=0)`.
  zvar : array, shape (n_components, float)
        The amount of variance explained by each of the selected components.
        Equal to n_components variance value
      of X.
    hvar : float
        The amount of variance explained by each of the selected components.
        Equal to n_components variance value
      of X.
